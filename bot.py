# -*- coding: utf-8 -*-
import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7575514249:AAEZd9zzOQKTJdRcwu9kgSG3SF0-7HQpa5k"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, QUESTION_6, QUESTION_7, QUESTION_8, RESULT = range(9)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = {}

# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ", callback_data="start_quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )
    return QUESTION_1

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_question(update: Update, context: CallbackContext, question_id: int) -> int:
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[question_id] = query.data

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_id = question_id + 1
    if next_question_id > 8:
        return await result(update, context)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if next_question_id == 1:
        text = "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö? üåÜ"
        options = {
            "1_a": "–í —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ (–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥)",
            "1_b": "–í –¥–µ–ª–æ–≤–æ–º —Ä–∞–π–æ–Ω–µ —Å —É–¥–æ–±–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–ö—É—Ä—Å–∫–∞—è/–°—Ä–µ—Ç–µ–Ω—Å–∫–∞—è)",
            "1_c": "–í —Å–ø–æ–∫–æ–π–Ω–æ–º –º–µ—Å—Ç–µ —Å –ø–∞—Ä–∫–æ–≤—ã–º–∏ –∑–æ–Ω–∞–º–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ (–ë–∞—É–º–∞–Ω—Å–∫–∞—è/–ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è)",
            "1_d": "–ù–∞ –ø—Ä–∏—Ä–æ–¥–µ —Å –ø–æ–ª–Ω—ã–º –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ–º –≤ —ç–∫–æ–ª–æ–≥–∏—á–Ω—É—é —Å—Ä–µ–¥—É (–ì–ª—ç–º–ø–∏–Ω–≥)",
        }
    elif next_question_id == 2:
        text = "–ö–∞–∫–æ–π —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? üèñÔ∏è"
        options = {
            "2_a": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö (—ç–∫—Å–∫—É—Ä—Å–∏–∏, –ø—Ä–æ–≥—É–ª–∫–∏)",
            "2_b": "–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö (—á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥, –º–µ–¥–∏—Ç–∞—Ü–∏—è)",
            "2_c": "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö (—Å –¥–µ—Ç—å–º–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏)",
            "2_d": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–¥—ã—Ö (–¥–ª—è –¥–≤–æ–∏—Ö)",
        }
    elif next_question_id == 3:
        text = "–ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? üè®"
        options = {
            "3_a": "–õ—é–∫—Å–æ–≤—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã",
            "3_b": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞",
            "3_c": "–•–æ—Å—Ç–µ–ª –∏–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ",
            "3_d": "–ö–µ–º–ø–∏–Ω–≥ –∏–ª–∏ –ø–∞–ª–∞—Ç–∫–∞",
        }
    elif next_question_id == 4:
        text = "–ö–∞–∫—É—é –µ–¥—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞? üçΩÔ∏è"
        options = {
            "4_a": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤—ã—Å–æ–∫–æ–π –∫—É—Ö–Ω–∏",
            "4_b": "–£—é—Ç–Ω—ã–µ –∫–∞—Ñ–µ –∏ –∑–∞–∫—É—Å–æ—á–Ω—ã–µ",
            "4_c": "–§–∞—Å—Ç—Ñ—É–¥ –∏ —É–ª–∏—á–Ω–∞—è –µ–¥–∞",
            "4_d": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –µ–¥—ã",
        }
    elif next_question_id == 5:
        text = "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –≥–æ—Ä–æ–¥—É? üö∂‚Äç‚ôÇÔ∏è"
        options = {
            "5_a": "–ü–µ—à–∫–æ–º",
            "5_b": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "5_c": "–¢–∞–∫—Å–∏ –∏–ª–∏ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥",
            "5_d": "–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        }
    elif next_question_id == 6:
        text = "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (—Å–ø–∞, —ç–∫—Å–∫—É—Ä—Å–∏–∏)? üí∞"
        options = {
            "6_a": "–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!",
            "6_b": "–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
            "6_c": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ª–æ–≤–∏–π",
        }
    elif next_question_id == 7:
        text = "–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —à—É–º–Ω—ã–µ –º–µ—Å—Ç–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π? üéâ"
        options = {
            "7_a": "–î–∞, —è –ª—é–±–ª—é —à—É–º–Ω—ã–µ –º–µ—Å—Ç–∞",
            "7_b": "–ù–µ—Ç, —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ç–∏—à–∏–Ω—É",
            "7_c": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        }
    elif next_question_id == 8:
        text = "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚úÖ"
        options = {
            "8_a": "–î–∞, —è –≥–æ—Ç–æ–≤ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
            "8_b": "–ù–µ—Ç, —è —Ö–æ—á—É –ø–æ–¥—É–º–∞—Ç—å",
            "8_c": "–Ø —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)]
        for key, text in options.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )
    return next_question_id

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def result(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    answers = list(user_answers.values())
    if answers.count("1_a") + answers.count("2_a") + answers.count("3_a") > 4:
        hotel = "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥"
        url = "https://norke.ru/hotel1"
    elif answers.count("1_b") + answers.count("2_b") + answers.count("7_a") > 4:
        hotel = "–°—Ä–µ—Ç–µ–Ω—Å–∫–∞—è/–ö—É—Ä—Å–∫–∞—è"
        url = "https://norke.ru/hotel2"
    elif answers.count("1_c") + answers.count("2_c") + answers.count("3_c") > 4:
        hotel = "–ë–∞—É–º–∞–Ω—Å–∫–∞—è/–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è"
        url = "https://norke.ru/hotel3"
    else:
        hotel = "–ì–ª—ç–º–ø–∏–Ω–≥"
        url = "https://norke.ru/glamping"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = [
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç üè®", url=url)],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üîç", url="https://norke.ru")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {hotel}.\n"
             f"–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start.")
    return ConversationHandler.END

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.process_update(update)
    return "OK"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION_1: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 1))],
            QUESTION_2: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 2))],
            QUESTION_3: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 3))],
            QUESTION_4: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 4))],
            QUESTION_5: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 5))],
            QUESTION_6: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 6))],
            QUESTION_7: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 7))],
            QUESTION_8: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 8))],
            RESULT: [CallbackQueryHandler(result)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_chat=True,
        per_user=True
    )
    application.add_handler(conv_handler)

    # –ü—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç Render
    render_url = "https://telegram-bot-d8rq.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π Render URL

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
        url_path=TOKEN,
        webhook_url=f"{render_url}/{TOKEN}"  # –ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    )

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT

# -*- coding: utf-8 -*-
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7575514249:AAEZd9zzOQKTJdRcwu9kgSG3SF0-7HQpa5k"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, QUESTION_6, QUESTION_7, QUESTION_8, RESULT = range(9)

# –í–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤
WEIGHTS = {
    # –í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö?
    "1_a": {"city_center": 3},
    "1_b": {"business_area": 2},
    "1_c": {"business_area": 1, "nature": 1},
    "1_d": {"nature": 3},

    # –í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?
    "2_a": {"city_center": 2, "business_area": 1},
    "2_b": {"nature": 2},
    "2_c": {"city_center": 1, "business_area": 1},
    "2_d": {"nature": 2},

    # –í–æ–ø—Ä–æ—Å 3: –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?
    "3_a": {"city_center": 3},
    "3_b": {"business_area": 2},
    "3_c": {"nature": 1},
    "3_d": {"nature": 3},

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = {}

# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )
    return QUESTION_1

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_question(update: Update, context: CallbackContext, question_id: int) -> int:
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[question_id] = query.data

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_id = question_id + 1
    if next_question_id > 8:
        return await result(update, context)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    text = f"–í–æ–ø—Ä–æ—Å {next_question_id}: ..."
    keyboard = [
        [InlineKeyboardButton("–í–∞—Ä–∏–∞–Ω—Ç 1", callback_data=f"{next_question_id}_a")],
        [InlineKeyboardButton("–í–∞—Ä–∏–∞–Ω—Ç 2", callback_data=f"{next_question_id}_b")],
        [InlineKeyboardButton("–í–∞—Ä–∏–∞–Ω—Ç 3", callback_data=f"{next_question_id}_c")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)
    return next_question_id

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def result(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
    scores = {"city_center": 0, "business_area": 0, "nature": 0}
    for answer in user_answers.values():
        if answer in WEIGHTS:
            for category, weight in WEIGHTS[answer].items():
                scores[category] += weight

    # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    max_category = max(scores, key=scores.get)
    if max_category == "city_center":
        hotel = "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥"
        url = "https://norke.ru/hotel1"
    elif max_category == "business_area":
        hotel = "–°—Ä–µ—Ç–µ–Ω—Å–∫–∞—è/–ö—É—Ä—Å–∫–∞—è"
        url = "https://norke.ru/hotel2"
    else:
        hotel = "–ì–ª—ç–º–ø–∏–Ω–≥"
        url = "https://norke.ru/glamping"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = [
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç", url=url)],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", url="https://norke.ru")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {hotel}.\n"
             f"–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.process_update(update)
    return "OK"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION_1: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 1))],
            QUESTION_2: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 2))],
            QUESTION_3: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 3))],
            QUESTION_4: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 4))],
            QUESTION_5: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 5))],
            QUESTION_6: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 6))],
            QUESTION_7: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 7))],
            QUESTION_8: [CallbackQueryHandler(lambda u, c: handle_question(u, c, 8))],
            RESULT: [CallbackQueryHandler(result)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False,
        per_chat=True,
        per_user=True
    )
    application.add_handler(conv_handler)

    # –ü—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç Render
    render_url = "https://telegram-bot-d8rq.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π Render URL

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        url_path=TOKEN,
        webhook_url=f"{render_url}/{TOKEN}"  # –ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    )

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
